import streamlit as st
import cv2
import numpy as np
from controllers.image_processing_ch3 import (
    Negative, Logarit, Power, PiecewiseLinear, Histogram,
    HistEqual, HistEqualColor, LocalHist, HistStat,
    MyBoxFilter, BoxFilter, Threshold, MedianFilter,
    Sharpen, Gradient
)

def ImageProcessingView():
    st.markdown("### üì∑ Ch∆∞∆°ng 3: X·ª≠ l√Ω ·∫£nh")
    st.write("T·∫£i l√™n ·∫£nh v√† ch·ªçn ph∆∞∆°ng ph√°p x·ª≠ l√Ω ·∫£nh ƒë·ªÉ xem k·∫øt qu·∫£.")

    # Danh s√°ch c√°c ph∆∞∆°ng ph√°p x·ª≠ l√Ω ·∫£nh
    methods = [
        "Negative", "Logarit", "Power", "PiecewiseLinear", "Histogram",
        "HistEqual", "HistEqualColor", "LocalHist", "HistStat",
        "MyBoxFilter", "BoxFilter", "Threshold", "MedianFilter",
        "Sharpen", "Gradient"
    ]

    # Ch·ªçn ph∆∞∆°ng ph√°p x·ª≠ l√Ω
    selected_method = st.selectbox("Ch·ªçn ph∆∞∆°ng ph√°p x·ª≠ l√Ω", methods)

    # T·∫£i ·∫£nh l√™n
    uploaded_file = st.file_uploader("T·∫£i l√™n ·∫£nh", type=["jpg", "jpeg", "png"])

    if uploaded_file is not None:
        # ƒê·ªçc ·∫£nh t·ª´ file
        file_bytes = np.asarray(bytearray(uploaded_file.read()), dtype=np.uint8)
        image = cv2.imdecode(file_bytes, cv2.IMREAD_COLOR)

        if image is None:
            st.error("Kh√¥ng th·ªÉ ƒë·ªçc file ·∫£nh. Vui l√≤ng th·ª≠ file kh√°c.")
            return

        # Hi·ªÉn th·ªã ·∫£nh g·ªëc
        st.markdown("#### ·∫¢nh g·ªëc")
        image_rgb = cv2.cvtColor(image, cv2.COLOR_BGR2RGB)
        st.image(image_rgb, caption="·∫¢nh g·ªëc")

        # X·ª≠ l√Ω ·∫£nh theo ph∆∞∆°ng ph√°p ƒë∆∞·ª£c ch·ªçn
        try:
            if selected_method == "Negative":
                result = Negative(image)
            elif selected_method == "Logarit":
                result = Logarit(image)
            elif selected_method == "Power":
                result = Power(image)
            elif selected_method == "PiecewiseLinear":
                result = PiecewiseLinear(image)
            elif selected_method == "Histogram":
                result = Histogram(image)
            elif selected_method == "HistEqual":
                result = HistEqual(image)
            elif selected_method == "HistEqualColor":
                result = HistEqualColor(image)
            elif selected_method == "LocalHist":
                result = LocalHist(image)
            elif selected_method == "HistStat":
                result = HistStat(image)
            elif selected_method == "MyBoxFilter":
                result = MyBoxFilter(image)
            elif selected_method == "BoxFilter":
                result = BoxFilter(image)
            elif selected_method == "Threshold":
                result = Threshold(image)
            elif selected_method == "MedianFilter":
                result = MedianFilter(image)
            elif selected_method == "Sharpen":
                result = Sharpen(image)
            elif selected_method == "Gradient":
                result = Gradient(image)

            # Hi·ªÉn th·ªã ·∫£nh k·∫øt qu·∫£
            st.markdown("#### ·∫¢nh k·∫øt qu·∫£")
            if len(result.shape) == 3:  # ·∫¢nh m√†u
                result_rgb = cv2.cvtColor(result, cv2.COLOR_BGR2RGB)
                st.image(result_rgb, caption=f"K·∫øt qu·∫£ sau khi √°p d·ª•ng {selected_method}")
            else:  # ·∫¢nh x√°m
                st.image(result, caption=f"K·∫øt qu·∫£ sau khi √°p d·ª•ng {selected_method}", use_container_width=True)

        except Exception as e:
            st.error(f"L·ªói khi x·ª≠ l√Ω ·∫£nh: {str(e)}")