import streamlit as st
import cv2
import numpy as np
from controllers.image_processing_ch5 import (
    CreateMotionNoise, DenoiseMotion, WienerFilter, HistEqual
)

def ImageProcessingCh5View():
    st.markdown(
        """
        <style>
        .image-processing-container {
            text-align: center;
            background-color: #e6f7ff;
            padding: 20px;
            border-radius: 10px;
            margin-bottom: 20px;
        }
        .image-processing-container h3 {
            color: #007acc;
        }
        </style>
        """,
        unsafe_allow_html=True
    )

    st.markdown(
        """
        <div class="image-processing-container">
            <h3>üì∑ Ch∆∞∆°ng 5: X·ª≠ l√Ω ·∫£nh trong mi·ªÅn t·∫ßn s·ªë v√† kh·ª≠ nhi·ªÖu</h3>
            <p style="color: #007acc;">T·∫£i l√™n ·∫£nh v√† ch·ªçn ph∆∞∆°ng ph√°p x·ª≠ l√Ω ·∫£nh ƒë·ªÉ xem k·∫øt qu·∫£.</p>
        </div>
        """,
        unsafe_allow_html=True
    )

    # Danh s√°ch c√°c ph∆∞∆°ng ph√°p x·ª≠ l√Ω ·∫£nh
    methods = [
        "CreateMotionNoise", "DenoiseMotion", "WienerFilter", "HistEqual"
    ]

    # Ch·ªçn ph∆∞∆°ng ph√°p x·ª≠ l√Ω
    selected_method = st.selectbox("Ch·ªçn ph∆∞∆°ng ph√°p x·ª≠ l√Ω", methods)

    # T·∫£i ·∫£nh l√™n
    uploaded_file = st.file_uploader("T·∫£i l√™n ·∫£nh", type=["jpg", "jpeg", "png"])

    if uploaded_file is not None:
        # ƒê·ªçc ·∫£nh t·ª´ file
        file_bytes = np.asarray(bytearray(uploaded_file.read()), dtype=np.uint8)
        image = cv2.imdecode(file_bytes, cv2.IMREAD_COLOR)

        if image is None:
            st.error("Kh√¥ng th·ªÉ ƒë·ªçc file ·∫£nh. Vui l√≤ng th·ª≠ file kh√°c.")
            return

        # Hi·ªÉn th·ªã ·∫£nh g·ªëc
        st.markdown("#### ·∫¢nh g·ªëc")
        image_rgb = cv2.cvtColor(image, cv2.COLOR_BGR2RGB)
        st.image(image_rgb, caption="·∫¢nh g·ªëc")

        # X·ª≠ l√Ω ·∫£nh theo ph∆∞∆°ng ph√°p ƒë∆∞·ª£c ch·ªçn
        try:
            if selected_method == "CreateMotionNoise":
                result = CreateMotionNoise(image)
            elif selected_method == "DenoiseMotion":
                result = DenoiseMotion(image)
            elif selected_method == "WienerFilter":
                kernel_size = st.slider("K√≠ch th∆∞·ªõc kernel", 3, 15, 3, step=2)
                K = st.slider("H·∫±ng s·ªë K", 1, 50, 10)
                result = WienerFilter(image, kernel_size=kernel_size, K=K)
            elif selected_method == "HistEqual":
                result = HistEqual(image)

            # Hi·ªÉn th·ªã ·∫£nh k·∫øt qu·∫£
            st.markdown("#### ·∫¢nh k·∫øt qu·∫£")
            if len(result.shape) == 3:  # ·∫¢nh m√†u
                result_rgb = cv2.cvtColor(result, cv2.COLOR_BGR2RGB)
                st.image(result_rgb, caption=f"K·∫øt qu·∫£ sau khi √°p d·ª•ng {selected_method}")
            else:  # ·∫¢nh x√°m
                st.image(result, caption=f"K·∫øt qu·∫£ sau khi √°p d·ª•ng {selected_method}", use_container_width=True)

        except Exception as e:
            st.error(f"L·ªói khi x·ª≠ l√Ω ·∫£nh: {str(e)}")